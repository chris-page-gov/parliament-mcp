{
    "MCP Tool Call": {
        "prefix": "mcp-call",
        "body": [
            "import asyncio",
            "import aiohttp",
            "",
            "async def call_mcp_tool():",
            "    payload = {",
            "        \"jsonrpc\": \"2.0\",",
            "        \"id\": 1,",
            "        \"method\": \"tools/call\",",
            "        \"params\": {",
            "            \"name\": \"${1:tool_name}\",",
            "            \"arguments\": {",
            "                \"${2:param}\": \"${3:value}\"",
            "            }",
            "        }",
            "    }",
            "    ",
            "    async with aiohttp.ClientSession() as session:",
            "        async with session.post(",
            "            \"http://localhost:8080/mcp/\",",
            "            json=payload,",
            "            headers={\"Content-Type\": \"application/json\"}",
            "        ) as response:",
            "            result = await response.json()",
            "            print(result)",
            "",
            "# Run the function",
            "asyncio.run(call_mcp_tool())"
        ],
        "description": "Template for calling MCP tools from Python"
    },
    "MCP List Tools": {
        "prefix": "mcp-list",
        "body": [
            "import asyncio",
            "import aiohttp",
            "",
            "async def list_mcp_tools():",
            "    payload = {",
            "        \"jsonrpc\": \"2.0\",",
            "        \"id\": 1,",
            "        \"method\": \"tools/list\"",
            "    }",
            "    ",
            "    async with aiohttp.ClientSession() as session:",
            "        async with session.post(",
            "            \"http://localhost:8080/mcp/\",",
            "            json=payload,",
            "            headers={\"Content-Type\": \"application/json\"}",
            "        ) as response:",
            "            result = await response.json()",
            "            if 'result' in result and 'tools' in result['result']:",
            "                for tool in result['result']['tools']:",
            "                    print(f\"â€¢ {tool['name']}: {tool.get('description', 'No description')}\")",
            "",
            "# Run the function",
            "asyncio.run(list_mcp_tools())"
        ],
        "description": "List all available MCP tools"
    }
}